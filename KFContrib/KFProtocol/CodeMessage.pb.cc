// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CodeMessage.proto

#ifdef _MSC_VER
	#pragma warning(push)
	#pragma warning(disable : 4125)
	#pragma warning(disable : 4668)
	#pragma warning(disable : 4800)
	#pragma warning(disable : 4647)
#endif

#include "CodeMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace KFMsg {
}  // namespace KFMsg
namespace protobuf_CodeMessage_2eproto {
void InitDefaults() {
}

const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];
const ::google::protobuf::uint32 TableStruct::offsets[1] = {};
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "CodeMessage.proto", schemas, file_default_instances, TableStruct::offsets,
      NULL, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021CodeMessage.proto\022\005KFMsg*\214\"\n\017ProjectCo"
      "deEnum\022\016\n\nLogicError\020\000\022\024\n\016MatchRequestOk"
      "\020\231\362\001\022\026\n\020MatchAlreadyWait\020\232\362\001\022\021\n\013MatchInR"
      "oom\020\233\362\001\022\025\n\017MatchNotInMatch\020\234\362\001\022\023\n\rMatchC"
      "ancelOk\020\235\362\001\022\030\n\022MatchAffirmTimeout\020\237\362\001\022\025\n"
      "\017RoomAllotBattle\020\240\362\001\022\022\n\014MatchIdError\020\241\362\001"
      "\022\026\n\020HeroDivisorError\020\375\362\001\022\026\n\020HeroDivisorE"
      "xist\020\376\362\001\022\030\n\022HeroRecruitRefresh\020\377\362\001\022!\n\033He"
      "roRecruitRefreshFreeError\020\200\363\001\022!\n\033HeroRec"
      "ruitRefreshTypeError\020\201\363\001\022\031\n\023HeroRecruitN"
      "otExist\020\202\363\001\022\032\n\024HeroRecruitCostError\020\203\363\001\022"
      "\032\n\024HeroRecruitDataError\020\204\363\001\022\023\n\rHeroRecru"
      "itOk\020\205\363\001\022\031\n\023HeroDivisorMaxCount\020\206\363\001\022\022\n\014H"
      "eroNotExist\020\207\363\001\022\030\n\022HeroTeamIndexError\020\210\363"
      "\001\022\031\n\023HeroTeamDataInvalid\020\211\363\001\022\027\n\021HeroNotI"
      "nHeroList\020\212\363\001\022\024\n\016HeroLevelIsMax\020\213\363\001\022\027\n\021H"
      "eroLockNotChange\020\214\363\001\022\022\n\014HeroIsLocked\020\215\363\001"
      "\022\027\n\021HeroLockFlagError\020\216\363\001\022\027\n\021HeroNameNot"
      "Change\020\217\363\001\022\030\n\022HeroSkillNotChange\020\220\363\001\022\031\n\023"
      "HeroSkillIndexError\020\221\363\001\022\021\n\013HeroHpIsMax\020\222"
      "\363\001\022\033\n\025HeroTransferDataError\020\223\363\001\022\030\n\022HeroL"
      "evelNotEnough\020\224\363\001\022\033\n\025HeroTransferCostErr"
      "or\020\225\363\001\022\030\n\022HeroCanNotTransfer\020\226\363\001\022\033\n\025Hero"
      "ProfessionIsError\020\227\363\001\022\023\n\rHeroNameEmpty\020\230"
      "\363\001\022\036\n\030HeroSelectInnateNumError\020\231\363\001\022\035\n\027He"
      "roSelectInnateIdError\020\232\363\001\022\020\n\nHeroIsDead\020"
      "\233\363\001\022\025\n\017HeroRaceIsError\020\234\363\001\022\032\n\024HeroDiviso"
      "rNotUnlock\020\235\363\001\022\035\n\027HeroRecruitRefreshCoun"
      "t\020\236\363\001\022 \n\032HeroRecruitRefreshGenerate\020\237\363\001\022"
      "\036\n\030HeroRecruitRefreshWeight\020\240\363\001\022\037\n\031HeroR"
      "efreshCountNotEnough\020\241\363\001\022\033\n\025HeroRecruitR"
      "efreshSuc\020\242\363\001\022\033\n\025HeroDurabilityNotZero\020\244"
      "\363\001\022\036\n\030ContractTimeFormulaError\020\245\363\001\022\037\n\031Co"
      "ntractPriceFormulaError\020\246\363\001\022\030\n\022ContractT"
      "imeIsZero\020\247\363\001\022!\n\033HeroTeamDurabilityNotEn"
      "ough\020\250\363\001\022\025\n\017HeroContractSuc\020\251\363\001\022\023\n\rHeroR"
      "etireSuc\020\252\363\001\022\035\n\027SpecialHeroCanNotRemove\020"
      "\253\363\001\022\031\n\023TrainCampLevelError\020\340\363\001\022\031\n\023TrainC"
      "ampIndexError\020\341\363\001\022\033\n\025TrainCampHeroNotExi"
      "st\020\342\363\001\022\032\n\024TrainCampHeroIsExist\020\343\363\001\022\030\n\022Bu"
      "ildFuncNotActive\020\344\363\001\022\032\n\024MainCampSkinNotE"
      "xist\020\345\363\001\022\033\n\025MainCampSkinNotActive\020\346\363\001\022\030\n"
      "\022ClinicSettingError\020\347\363\001\022\033\n\025ClinicItemIsN"
      "otEnough\020\350\363\001\022\030\n\022ClinicMoneyIsError\020\351\363\001\022\033"
      "\n\025TrainCampSettingError\020\352\363\001\022\031\n\023TrainCamp"
      "IsFinished\020\353\363\001\022\031\n\023GranarySettingError\020\354\363"
      "\001\022\030\n\022GranaryHaveNotItem\020\355\363\001\022\034\n\026SmithyCon"
      "sumeNotEnough\020\356\363\001\022\030\n\022SmithySettingError\020"
      "\357\363\001\022\027\n\021SmithyHaveNotItem\020\360\363\001\022\026\n\020SmithySt"
      "oreIsMax\020\361\363\001\022\036\n\030SmithyWeaponSettingError"
      "\020\362\363\001\022\030\n\022SmithyMakeNumError\020\363\363\001\022\034\n\026Smithy"
      "MakeNumNotEnough\020\364\363\001\022\034\n\026ClinicCountIsNot"
      "Enough\020\365\363\001\022\027\n\021ClinicNotNeedCure\020\366\363\001\022\025\n\017B"
      "uildLevelIsMax\020\370\363\001\022\030\n\022BuildInUpgradeTime"
      "\020\371\363\001\022\034\n\026BuildNoFreeUpgradeList\020\372\363\001\022\037\n\031Bu"
      "ildUpgradeLackCondition\020\373\363\001\022\033\n\025BuildNotI"
      "nUpgradeTime\020\374\363\001\022\034\n\026BuildLevelSettingErr"
      "or\020\375\363\001\022\034\n\026TechnologySettingError\020\376\363\001\022 \n\032"
      "TechnologyLackPreCondition\020\377\363\001\022\030\n\022Techno"
      "logyIsUnlock\020\200\364\001\022\026\n\020TechnologyIslock\020\201\364\001"
      "\022\025\n\017BuildUpgradeSuc\020\202\364\001\022\024\n\016TrainNotFinis"
      "h\020\203\364\001\022\032\n\024SmithyMakeLevelLimit\020\204\364\001\022\027\n\021For"
      "mulaParamError\020\205\364\001\022\032\n\024GranaryBuyCountLim"
      "it\020\206\364\001\022\034\n\026GranaryBuySettingError\020\207\364\001\022\032\n\024"
      "GranaryBuyParamError\020\210\364\001\022\030\n\022BuildCanNotU"
      "pgrade\020\211\364\001\022\036\n\030GranaryFootMaxCountLimit\020\212"
      "\364\001\022\023\n\rRealmMapError\020\305\364\001\022\025\n\017RealmLevelErr"
      "or\020\306\364\001\022\027\n\021RealmNotInExplore\020\311\364\001\022\020\n\nPVEId"
      "Error\020\312\364\001\022\020\n\nPVEAlready\020\313\364\001\022\022\n\014RealmAlre"
      "ady\020\314\364\001\022\026\n\020RealmNotInStatus\020\315\364\001\022\024\n\016PVENo"
      "tInStatus\020\316\364\001\022\026\n\020PVEHeroTeamEmpty\020\317\364\001\022\026\n"
      "\020PVEHeroTeamExist\020\320\364\001\022\023\n\rPVEMapIdError\020\321"
      "\364\001\022\024\n\016RealmDataError\020\322\364\001\022\025\n\017RealmIdMisma"
      "tch\020\323\364\001\022\022\n\014RealmNotTown\020\324\364\001\022\021\n\013RealmInTo"
      "wn\020\325\364\001\022\030\n\022RealmHeroTeamEmpty\020\326\364\001\022\023\n\rPVEC"
      "anNotFlee\020\327\364\001\022\023\n\rNpcGroupError\020\330\364\001\022\023\n\rGa"
      "mbleIdError\020\331\364\001\022\026\n\020GambleParamError\020\333\364\001\022"
      "\025\n\017ExchangeIdError\020\334\364\001\022\025\n\017ExchangeNotRun"
      "e\020\335\364\001\022\030\n\022ExchangeLevelError\020\336\364\001\022\023\n\rSelec"
      "tIdError\020\337\364\001\022\026\n\020SelectCountError\020\340\364\001\022\025\n\017"
      "SelectUUIDError\020\341\364\001\022\027\n\021SelectRecordError"
      "\020\342\364\001\022\027\n\021MultiEventIdError\020\343\364\001\022\032\n\024MultiEv"
      "entIndexError\020\344\364\001\022\022\n\014NpcRandError\020\345\364\001\022\024\n"
      "\016ChapterIdError\020\221\375\001\022\024\n\016ChapterNotOpen\020\222\375"
      "\001\022\027\n\021ChapterEventError\020\223\375\001\022\031\n\023ChapterDef"
      "aultError\020\224\375\001\022\032\n\024ChapterStatusIdError\020\225\375"
      "\001\022\032\n\024ChapterExecuteFailed\020\226\375\001\022\024\n\016ItemWea"
      "ponOnly\020\364\375\001\022\031\n\023ItemWeaponRaceLimit\020\365\375\001\022\031"
      "\n\023ItemWeaponHeroLimit\020\366\375\001\022\032\n\024ItemWeaponL"
      "evelLimit\020\367\375\001\022\026\n\020ItemWeaponFailed\020\370\375\001\022\022\n"
      "\014ItemWeaponOk\020\371\375\001\022\030\n\022ItemWeaponNotExist\020"
      "\372\375\001\022\030\n\022ItemUnWeaponFailed\020\373\375\001\022\024\n\016ItemUnW"
      "eaponOk\020\374\375\001\022\037\n\031ItemUpdateDurabilityError"
      "\020\375\375\001\022\031\n\023ItemCanNotUseToHero\020\376\375\001\022\027\n\021RuneS"
      "ameTypeLimit\020\202\376\001\022\022\n\014RunePutOnSuc\020\203\376\001\022\024\n\016"
      "RuneTakeOffSuc\020\204\376\001\022\031\n\023PlayerHeadIconSetO"
      "K\020\331\376\001\022\030\n\022PlayerFactionSetOK\020\332\376\001\022\034\n\026Playe"
      "rHeadIconNotExist\020\333\376\001\022\033\n\025PlayerFactionNo"
      "tExist\020\334\376\001\022\032\n\024PlayerHeadIconNotHad\020\335\376\001\022\032"
      "\n\024StorySettingNotExist\020\274\377\001\022\023\n\rStoryNotEx"
      "ist\020\275\377\001\022\032\n\024StorySequenceIsError\020\276\377\001\022\033\n\025S"
      "toryTriggerTypeLimit\020\277\377\001\022\035\n\027DialogueSett"
      "ingNotExist\020\300\377\001\022\026\n\020DialogueNotExist\020\301\377\001\022"
      "\033\n\025DialogueHaveNotBranch\020\302\377\001\022\034\n\026Dialogue"
      "BranchNotExist\020\303\377\001\022!\n\033DialogueBranchLack"
      "Condition\020\304\377\001\022\033\n\025BranchSettingNotExist\020\305"
      "\377\001\022\035\n\027DialogueBranchSelectSuc\020\306\377\001\022\035\n\027Sto"
      "ryHaveDialogueBranch\020\307\377\001\022\034\n\026StorySequenc"
      "eNotFinish\020\310\377\001\022\031\n\023StoryIsNotMainStory\020\311\377"
      "\001\022\036\n\030TaskChainSettingNotExist\020\240\200\002b\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4401);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CodeMessage.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_CodeMessage_2eproto
namespace KFMsg {
const ::google::protobuf::EnumDescriptor* ProjectCodeEnum_descriptor() {
  protobuf_CodeMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CodeMessage_2eproto::file_level_enum_descriptors[0];
}
bool ProjectCodeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 31001:
    case 31002:
    case 31003:
    case 31004:
    case 31005:
    case 31007:
    case 31008:
    case 31009:
    case 31101:
    case 31102:
    case 31103:
    case 31104:
    case 31105:
    case 31106:
    case 31107:
    case 31108:
    case 31109:
    case 31110:
    case 31111:
    case 31112:
    case 31113:
    case 31114:
    case 31115:
    case 31116:
    case 31117:
    case 31118:
    case 31119:
    case 31120:
    case 31121:
    case 31122:
    case 31123:
    case 31124:
    case 31125:
    case 31126:
    case 31127:
    case 31128:
    case 31129:
    case 31130:
    case 31131:
    case 31132:
    case 31133:
    case 31134:
    case 31135:
    case 31136:
    case 31137:
    case 31138:
    case 31140:
    case 31141:
    case 31142:
    case 31143:
    case 31144:
    case 31145:
    case 31146:
    case 31147:
    case 31200:
    case 31201:
    case 31202:
    case 31203:
    case 31204:
    case 31205:
    case 31206:
    case 31207:
    case 31208:
    case 31209:
    case 31210:
    case 31211:
    case 31212:
    case 31213:
    case 31214:
    case 31215:
    case 31216:
    case 31217:
    case 31218:
    case 31219:
    case 31220:
    case 31221:
    case 31222:
    case 31224:
    case 31225:
    case 31226:
    case 31227:
    case 31228:
    case 31229:
    case 31230:
    case 31231:
    case 31232:
    case 31233:
    case 31234:
    case 31235:
    case 31236:
    case 31237:
    case 31238:
    case 31239:
    case 31240:
    case 31241:
    case 31242:
    case 31301:
    case 31302:
    case 31305:
    case 31306:
    case 31307:
    case 31308:
    case 31309:
    case 31310:
    case 31311:
    case 31312:
    case 31313:
    case 31314:
    case 31315:
    case 31316:
    case 31317:
    case 31318:
    case 31319:
    case 31320:
    case 31321:
    case 31323:
    case 31324:
    case 31325:
    case 31326:
    case 31327:
    case 31328:
    case 31329:
    case 31330:
    case 31331:
    case 31332:
    case 31333:
    case 32401:
    case 32402:
    case 32403:
    case 32404:
    case 32405:
    case 32406:
    case 32500:
    case 32501:
    case 32502:
    case 32503:
    case 32504:
    case 32505:
    case 32506:
    case 32507:
    case 32508:
    case 32509:
    case 32510:
    case 32514:
    case 32515:
    case 32516:
    case 32601:
    case 32602:
    case 32603:
    case 32604:
    case 32605:
    case 32700:
    case 32701:
    case 32702:
    case 32703:
    case 32704:
    case 32705:
    case 32706:
    case 32707:
    case 32708:
    case 32709:
    case 32710:
    case 32711:
    case 32712:
    case 32713:
    case 32800:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace KFMsg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

#ifdef _MSC_VER
	#pragma warning(  pop  )
#endif

// @@protoc_insertion_point(global_scope)
