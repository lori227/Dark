syntax = "proto3";
import "DefineMessage.proto";
import "FrameDefineMessage.proto";
package KFMsg;

// 协议号区间 : 3000-10000
enum ClientProtocol
 {
	MSG_CLIENT_BEGIN 				= 0;	// pb3 需要0

	// match
	MSG_START_MATCH_REQ  			= 3001;	// 开始匹配 
	MSG_CANCEL_MATCH_REQ			= 3002;	// 取消匹配
	MSG_INFORM_MATCH_RESULT 		= 3003;	// 通知匹配结果
	MSG_AFFIRM_MATCH_REQ 			= 3004;	// 请求确认匹配
	MSG_INFORM_BATTLE_REQ			= 3005;	// 服务器通知战场信息
	MSG_INFORM_BATTLE_ACK			= 3006;	// 客户端确认战场信息
	MSG_FINISH_ROOM_REQ				= 3007;	// 服务器通知战场房间结束

	// hero
	MSG_OPEN_RECRUIT_REQ			= 3101;	// 打开招募所
	MSG_REFRESH_RECRUIT_REQ			= 3102;	// 刷新招募英雄
	MSG_CHOOSE_DIVISOR_REQ			= 3103;	// 选择偏好因子
	MSG_REMOVE_DIVISOR_REQ			= 3104;	// 取消偏好因子
	MSG_RECRUIT_HERO_REQ			= 3105;	// 招募英雄
	MSG_HERO_TEAM_CHANGE_REQ		= 3106;	// 队伍改变请求(增加删除)
	MSG_HERO_TEAM_EXCHANGE_REQ  	= 3107; // 队伍角色互换请求
	MSG_LOCK_HERO_REQ				= 3108;	// 锁定英雄
	MSG_REMOVE_HERO_REQ				= 3109;	// 删除英雄
	MSG_SET_HERO_NAME_REQ			= 3110; // 设置英雄名字
	MSG_SET_RECRUIT_HERO_NAME_REQ 	= 3111; // 设置招募所英雄名字
	MSG_SET_HERO_ACTIVE_SKILL_REQ	= 3112; // 选择英雄主动技能

	// train
	MSG_TRAIN_CHANGE_REQ			= 3200;	// 训练改变请求(增加删除)
	MSG_TRAIN_EXCHANGE_REQ  		= 3201; // 训练角色互换请求
	MSG_TRAIN_CLEAN_REQ				= 3202;	// 一键清空训练栏

	// clinic
	MSG_CLINIC_CURE_REQ				= 3210;	// 治疗请求

	// maincamp
	MSG_SET_BUILD_SKIN_REQ			= 3223;	// 设置建筑外观

	// transfer
	MSG_TRANSFER_PRO_REQ			= 3250;	// 英雄转职请求
	MSG_SELECT_INNATE_REQ			= 3251;	// 选择天赋请求

	// chancel
	MSG_QUERY_DEAD_RECORD_REQ		= 3260;	// 查询死亡记录
	MSG_QUERY_DEAD_RECORD_ACK		= 3261;	// 死亡记录返回
	MSG_QUERY_LIFE_EVENT_REQ		= 3262;	// 查询生平事件
	MSG_QUERY_LIFE_EVENT_ACK		= 3263;	// 生平事件返回

	// explore
	MSG_EXPLORE_REQ					= 3301;	// 进入探索地图请求
	MSG_EXPLORE_ACK					= 3302;	// 进入探索地图回应
	MSG_FIGHTER_REQ					= 3303;	// 战斗请求(生成npc)
	MSG_FIGHTER_ACK					= 3304;	// 战斗回应	(生成npc)
	MSG_PVE_BALANCE_REQ				= 3305; // PVE战斗结算	
	MSG_EXIT_EXPLORE_REQ			= 3306; // 退出探索
	MSG_UPDATE_FIGHTER_REQ			= 3308;	// 更新战斗数据
	MSG_SYNC_FIGHTER_DATA			= 3309;	// 同步战斗数据
	MSG_PVE_BALANCE_ACK				= 3310;	// 战斗结算结果
	MSG_EXPLORE_BALANCE_REQ			= 3311;	// 探索结算请求
	MSG_EXPLORE_BALANCE_ACK			= 3312;	// 探索结算结果


	// daily
	MSG_QUERY_RECORD_REQ			= 3351;	// 查询记录
	MSG_QUERY_RECORD_ACK			= 3352;	// 记录返回
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 开始匹配
// MSG_START_MATCH_REQ
message MsgStartMatchReq
{
	bytes version = 1;		// 客户端版本号
	uint32 matchid = 2;		// 匹配模式
	uint64 serverid = 3;	// 指定的battle服务器id
}

// 取消匹配
// MSG_CANCEL_MATCH_REQ
message MsgCancelMatchReq
{
	uint32 matchid = 1;		// 匹配模式
}

// 通知匹配成功
// MSG_INFORM_MATCH_RESULT
message MsgInformMatchResult
{
	uint32 time = 1;		// 等待确认时间( 单位: 秒 )
}

// 请求确认
// MSG_AFFIRM_MATCH_REQ
message MsgAffirmMatchReq
{
}

// 通知战场信息
// MSG_INFORM_BATTLE_REQ
message MsgInformBattleReq
{
	uint64 roomid = 1;			// 房间id
	uint64 battleid = 2;		// 战斗服务器id
	bytes ip = 3;				// ip
	uint32 port = 4;			// 端口
}

// 确认战场信息
// MSG_INFORM_BATTLE_ACK
message MsgInformBattleAck
{
}

// 房间结束
// MSG_FINISH_ROOM_REQ
message MsgFinishRoomReq
{
	uint64 roomid = 1;			// 房间id
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 打开招募所界面
// 只是给服务器有一个刷免费英雄的时机
// MSG_OPEN_RECRUIT_REQ
message MsgOpenRecruitReq
{

}

// 刷新招募英雄
// MSG_REFRESH_RECRUIT_REQ
message MsgRefreshRecruitReq
{
	uint32 type = 1;	// 刷新类型(对应RecruitEnum), 不能使用免费刷新
} 

// 选择偏好因子
// MSG_CHOOSE_DIVISOR_REQ
message MsgChooseDivisorReq
{
	repeated uint32 id = 1;		// 偏好因子id数组
}

// 取消偏好因子
// MSG_REMOVE_DIVISOR_REQ
message MsgRemoveDivisorReq
{
	repeated uint32 id = 1;		// 偏好因子id数组
}

// 招募英雄
// MSG_RECRUIT_HERO_REQ
message MsgRecruitHeroReq
{
	uint64 uuid = 1;	// 英雄的uuid
}

// 队伍改变请求(增加删除)
// MSG_HERO_TEAM_CHANGE_REQ
message MsgHeroTeamChangeReq
{
	uint32 index = 1;	// 队伍的位置(索引从1开始)
	uint64 uuid = 2;	// 英雄的uuid(0就是取消)
}

// 队伍角色互换请求
// MSG_HERO_TEAM_EXCHANGE_REQ
message MsgHeroTeamExchangeReq
{
	uint32 oldindex = 1;	// 原来位置(索引从1开始)
	uint32 newindex = 2;	// 新的位置(索引从1开始)
}

// 锁定英雄
// MSG_LOCK_HERO_REQ
message MsgLockHeroReq
{
	uint64 uuid = 1;	// 英雄的uuid
	uint32 oper = 2;	// 操作类型(0：解锁 1：锁定英雄列表)
}

// 删除英雄
// MSG_REMOVE_HERO_REQ
message MsgRemoveHeroReq
{
	uint64 uuid = 1;	// 英雄的uuid
}

// 设置英雄名字
// MSG_SET_HERO_NAME_REQ
message MsgSetHeroNameReq
{
	uint64 uuid = 1;	// 英雄的uuid
	bytes name = 2;		// 名字
}

// 设置招募所英雄名字
// MSG_SET_RECRUIT_HERO_NAME_REQ
message MsgSetRecruitHeroNameReq
{
	uint64 uuid = 1;	// 英雄的uuid
	bytes name = 2;		// 名字
}

// 选择英雄主动技能
// MSG_SET_HERO_ACTIVE_SKILL_REQ
message MsgSetHeroActiveSkillReq
{
	uint64 uuid = 1;	// 英雄的uuid
	uint32 index = 2;	// 技能索引
}

// 训练改变请求(增加删除)
// MSG_TRAIN_CHANGE_REQ
message MsgTrainChangeReq
{
	uint32 index = 1;	// 训练栏的位置(索引从1开始)
	uint64 uuid = 2;	// 英雄的uuid(0就是取消)
}

// 训练角色互换请求
// MSG_TRAIN_EXCHANGE_REQ
message MsgTrainExchangeReq
{
	uint32 oldindex = 1;	// 原来位置(索引从1开始)
	uint32 newindex = 2;	// 新的位置(索引从1开始)
}

// 一键清空训练栏
// MSG_TRAIN_CLEAN_REQ
message MsgTrainCleanReq
{
}

// 治疗请求
// MSG_CLINIC_CURE_REQ
message MsgClinicCureReq
{
	uint64 uuid = 1;			// 英雄的uuid
}
////////////////////////////////////////////////////////////////////////////
// 进入探索地图请求
// MSG_EXPLORE_REQ	
message MsgExploreReq
{
	bytes mapid = 1;			// 探索的地图id
}

// 进入探索地图回应
// MSG_EXPLORE_ACK	
message MsgExploreAck
{
	bytes mapid = 1;			// 探索的地图id
	uint32 random = 2;			// 随机种子
	bytes data = 3;				// 探索数据( 帮客户端保存的 )
}

// 退出探索
// MSG_EXIT_EXPLORE_REQ
message MsgExitExploreReq
{

}

// 战斗请求(生成npc)
// MSG_FIGHTER_REQ
message MsgFighterReq
{
	uint32 level = 1;				// 关卡等级( 如果有的话 )
	repeated uint32 generate = 2;	// 需要生成的npc列表
}

// 战斗回应	(生成npc)
// MSG_FIGHTER_ACK
message MsgFighterAck
{
	map< uint64, PBObject > hero = 1;	// 英雄列表
	map< uint64, PBObject > npc = 2;	// npc列表
}

// 战斗结算请求
// MSG_PVE_BALANCE_REQ
message MsgPVEBalanceReq
{
	bytes data = 1;				// 探索数据( 帮客户端保存的 )
	uint32 result = 2;			// 战斗结果 1=成功 2=失败
	repeated PBBalanceHero balance = 4;	// 结算数据
	uint32 dropid = 5;			// 战斗结束掉落id
}

// 战斗结算结果
// MSG_PVE_BALANCE_ACK
message MsgPVEBalanceAck
{
	uint32 result = 1;			// 战斗结果 1=成功 2=失败
	PBBalanceData balance = 2;	// 结算结果
}

// 探索结算请求
// MSG_EXPLORE_BALANCE_REQ
message MsgExploreBalanceReq
{
	uint32 result = 1;			// 战斗结果 1=成功 2=失败 3=逃跑
}

// 探索结算结果
// MSG_EXPLORE_BALANCE_ACK
message MsgExploreBalanceAck
{
	uint32 result = 1;			// 战斗结果 1=成功 2=失败 3=逃跑
	PBBalanceData balance = 2;	// 结算结果
}

// 更新战斗数据
// MSG_UPDATE_FIGHTER_REQ
message MsgUpdateFighterReq
{
	repeated PBFighterData data = 1;	// 战斗数据
}

// 同步属性给客户端
// MSG_SYNC_FIGHTER_DATA
message MsgSyncFighterData
{
	uint64 uuid = 1;				// 英雄id
	bytes dataname = 2;				// 属性名
	uint32 value = 3;				// 数值
}
///////////////////////////////////////////////////////////
// 选择建筑外观
// MSG_SET_BUILD_SKIN_REQ
message MsgSetBuildSkinReq
{
	uint32 id = 1;				// 外观id
}

// 英雄转职请求
// MSG_TRANSFER_PRO_REQ
message MsgTransferProReq
{
	uint64 uuid = 1;			// 英雄id
	uint32 profession = 2;		// 职业id
}

// 选择天赋请求
// MSG_SELECT_INNATE_REQ
message MsgSelectInnateReq
{
	uint64 uuid = 1;			// 英雄id
	repeated uint32 innate = 2;	// 删除天赋id列表
}


// 查询死亡记录
// MSG_QUERY_DEAD_RECORD_REQ
message MsgQueryDeadRecordReq
{
}

// 死亡记录返回
// MSG_QUERY_DEAD_RECORD_ACK
message MsgQueryDeadRecordAck
{
	repeated PBRecordData deadrecord = 1;
}

// 查询生平事件
// MSG_QUERY_LIFE_EVENT_REQ
message MsgQueryLifeEventReq
{
	uint64 uuid = 1;		// 英雄uuid
}

// 生平事件返回
// MSG_QUERY_LIFE_EVENT_ACK
message MsgQueryLifeEventAck
{
	uint64 uuid = 1;		// 英雄uuid
	repeated PBRecordData lifeevent = 2;
}

////////////////////////////////////////////////////
// 查询营地记录
// MSG_QUERY_RECORD_REQ
message MsgQueryRecordReq
{
	uint32 type = 1;		// 记录类型
}

// 记录返回
// MSG_QUERY_RECORD_ACK
message MsgQueryRecordAck
{
	uint32 type = 1;		// 记录类型
	repeated PBRecordData pbrecord = 2;	// 记录数据
}
